package roomserver;

import java.awt.EventQueue;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.LinkedList;
import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTextPane;
import javax.swing.LayoutStyle;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;
import javax.swing.event.ListSelectionEvent;

public class ServerUI extends JFrame {
    
    /** Creates new form Antenna */
    public ServerUI() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        listSP = new JScrollPane();
        playerList = new JList<>();
        chatSP = new JScrollPane();
        chatPane = new JTextPane();
        textField = new JTextField();
        playerLModel = new DefaultListModel<>();
        chatHist = new LinkedList<>();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Server UI");

        chatPane.setEditable(false);
        chatSP.setViewportView(chatPane);

        textField.setFont(new Font("Segoe UI", 0, 11)); // NOI18N
        textField.addActionListener(this::sendMessage);
        
        playerList.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        playerList.setModel(playerLModel);
        playerList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        playerList.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent me) {
                playerSelected(me);
            }
        });
        listSP.setViewportView(playerList);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(listSP, GroupLayout.PREFERRED_SIZE, 100, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addComponent(chatSP, GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                    .addComponent(textField))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chatSP)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(listSP, GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    /**
     * Activated when the admin presses enter in the text field
     * @param evt the ActionEvent that is generated
     */
    private void sendMessage(ActionEvent evt) {                                            
        String message = textField.getText();
        textField.setText("");
        if(message.startsWith("/")) {
            chatHist.add(ClientCommunication.processCommand(
                    message.substring(1)));
        } else {
            chatHist.add("[ADMIN]: " + message);
            ClientCommunication.distributeMessage(message);
        }
        updateChat();
    }
    
    /**
     * Activated when the admin double clicks a user on the list
     * @param me the MouseEvent that is generated
     */
    private void playerSelected(MouseEvent me) {
        int idx = playerList.locationToIndex(me.getPoint());
        String selected = playerLModel.get(idx);
        if(selected != null) 
            textField.setText(textField.getText() + selected);
    }
    
    /**
     * Updates the chat according to the contents of {@code chatHist}.
     */
    private void updateChat() {
        String toSet = "<html>";
        for(String line : chatHist) {
            toSet += line + "<br>";
        }
        chatPane.setText(toSet + "</html>");
    }
    
    /**
     * Adds a player to the lobby list
     * @param name the name of the player
     */
    public void addPlayer(String name) {
        int i;
        for(i = 0; i < playerLModel.getSize(); i++) {
            if(name.compareTo(playerLModel.getElementAt(i)) < 0) break;
        }
        playerLModel.add(i, name);
    }
    
    /**
     * Removes a player from the lobby list
     * @param name the name of the player
     */
    public void removePlayer(String name) {
        playerLModel.removeElement(name);
    }
    
    /**
     * Creates and runs a ServerUI.
     * @return the created and shown ServerUI
     */
    public static ServerUI run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.LookAndFeelInfo[] installedLookAndFeels=UIManager.getInstalledLookAndFeels();
            for (UIManager.LookAndFeelInfo installedLookAndFeel : installedLookAndFeels) {
                if ("Nimbus".equals(installedLookAndFeel.getName())) {
                    UIManager.setLookAndFeel(installedLookAndFeel.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | 
                IllegalAccessException | UnsupportedLookAndFeelException ex) {
            ex.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        ServerUI output = new ServerUI();
        EventQueue.invokeLater(() -> {
            output.setVisible(true);
            output.updateChat();
        });
        return output;
    }
    
    //<editor-fold defaultstate="collapsed" desc="Variables declaration - do not modify">
    private JList<String> playerList;
    private DefaultListModel<String> playerLModel;
    private JScrollPane listSP;
    
    private JScrollPane chatSP;
    private JEditorPane chatPane;
    private LinkedList<String> chatHist;
    
    private JTextField textField;
    //</editor-fold>
}
